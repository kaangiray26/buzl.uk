import{_ as o,c as i,o as s,j as t,ag as n,a as r,t as h}from"./chunks/framework.CLEca2LO.js";const g=JSON.parse('{"title":"Using Webmentions with GitHub Actions","description":"","frontmatter":{"title":"Using Webmentions with GitHub Actions","date":"2024-08-22T00:00:00.000Z","author":"kaangiray26","tags":["indieweb","webmentions","jekyll","blog"]},"headers":[],"relativePath":"posts/2024-08-22-webmentions.md","filePath":"posts/2024-08-22-webmentions.md"}'),l={name:"posts/2024-08-22-webmentions.md"},p={id:"frontmatter-title",tabindex:"-1"};function d(a,e,m,c,b,u){return s(),i("div",null,[t("h1",p,[r(h(a.$frontmatter.title)+" ",1),e[0]||(e[0]=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"â€‹",-1))]),e[1]||(e[1]=n('<p>ðŸ“… August 22, 2024</p><p>Testing webmentions for the first time. This post will send a webmention to <a href="https://www.buzl.uk/2024/08/21/pyright.html" target="_blank" rel="noreferrer">another post</a> on my blog. Let&#39;s see if it works.</p><p><strong>Edit:</strong> It worked! I can see the webmention on my other post. Okay, let&#39;s go over how I set this up and how you can do it too.</p><h2 id="first-what-are-webmentions" tabindex="-1">First, what are webmentions? <a class="header-anchor" href="#first-what-are-webmentions" aria-label="Permalink to &quot;First, what are webmentions?&quot;">â€‹</a></h2><p>Webmention is another web standard recommendation from <a href="https://www.w3.org/TR/webmention/" target="_blank" rel="noreferrer">W3C</a>, that was written by the <a href="https://indieweb.org/Webmention" target="_blank" rel="noreferrer">IndieWeb</a> community. Basically, it describes a way for website owners to notify each other when they link each other&#39;s content on their posts. With Webmention, you can leave comments, likes, reposts, and other interactions on other people&#39;s websites, especially if you use <a href="https://indieweb.org/microformats" target="_blank" rel="noreferrer">microformats</a> with it.</p><p>I first learned about it on <a href="https://jamesg.blog/2024/02/19/personal-website-ideas/" target="_blank" rel="noreferrer">James&#39; Blog</a> and thought it was a pretty new thing. But it turns out, it&#39;s been around since 2016. I guess I&#39;m late to the party.</p><p>There are two sides to webmentions: receiving and sending. Let&#39;s start with the easier one.</p><h2 id="part-1-receiving" tabindex="-1">Part 1: Receiving <a class="header-anchor" href="#part-1-receiving" aria-label="Permalink to &quot;Part 1: Receiving&quot;">â€‹</a></h2><p>Notifications are simple HTTP requests. For that reason, we need a server that listens for incoming pings. I&#39;m using a popular choice called <a href="https://webmention.io/" target="_blank" rel="noreferrer">Webmention.io</a>, created by <a href="https://aaronparecki.com/" target="_blank" rel="noreferrer">Aaron Parecki</a>. It&#39;s one of those precious services that are free and open-source on the web. To set it up, you just create an account on the website, add your domain, and put a link tag on your website&#39;s head section. This is the one I have on my blog:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webmention&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://webmention.io/www.buzl.uk/webmention&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>With this tag, other websites can recognize that we accept webmentions. Showing them on your page is also very easy. I have a little script located at <a href="/assets/scripts/webmentions.js">webmentions.js</a> that fetches the webmentions from the service based on the URL of the post you&#39;re viewing as the target. Then, it adds them to the page as a list and shows them in the DOM. If there are no webmentions, the webmentions section is hidden.</p><h2 id="part-2-sending" tabindex="-1">Part 2: Sending <a class="header-anchor" href="#part-2-sending" aria-label="Permalink to &quot;Part 2: Sending&quot;">â€‹</a></h2><p>Sending webmentions manually is a bit tiresome. When you publish a post with links, for each link, you have to check if they support webmentions, and then send a request to their webmention endpoint containing the <code>source</code> and <code>target</code> URLs. Some people use services like <a href="https://webmention.app/" target="_blank" rel="noreferrer">Webmention.app</a> to automate this process, but I wanted to do it myself.</p><p>A little bit background about my blog: I use Jekyll as my static site generator, and I host it on GitHub Pages. For the build process, I just use the default GitHub Actions workflow that is recommended by Jekyll. With this setup, I just push some changes and the site is build and deployed automatically.</p><p>Now, with GitHub Actions, we can try to automate the webmention sending process. All we have to do is to collect all links from my posts, check the target URLs and find out if they support webmentions, and then send a request to their webmention endpoint. For this, we first take the <code>sitemap.xml</code> file that is generated by Jekyll and extract all the post URLs from it. These are the URLs of our blog posts. Then, we load each URL and extract all the links from the post.</p><p>However, we also need to save the webmentions we sent to avoid processing the same URL multiple times in future runs. For this, after the end of the workflow, we save the URLs as a JSON file as an asset by releasing a new release. We also save the domains that don&#39;t support webmentions to avoid checking them again. This way, we save the state of the workflow and don&#39;t have to check the same URLs again.</p><p>For the actual processing part, we have a Python script that does the job. I&#39;m not going to go into the details but it just makes some HTTP requests and parses the HTML with <a href="https://lxml.de/" target="_blank" rel="noreferrer">lxml</a>. It&#39;s not perfect but it does the job for now.</p><p>I&#39;ve added the files to a new repository, which you can check out <a href="https://github.com/kaangiray26/webmention" target="_blank" rel="noreferrer">here</a> if you want to adapt it to your own blog. My blog&#39;s source code is also available <a href="https://github.com/kaangiray26/buzl.uk" target="_blank" rel="noreferrer">here</a> if you want to see how I implemented the parts I mentioned above and below.</p><p>If you want to use this setup, here are the steps you need to follow:</p><ol><li>Create an account on Webmention.io and add your domain.</li><li>Add the link tag to your website&#39;s head section.</li><li>Have a <code>sitemap.xml</code> file on your website.</li><li>Add a <code>TOKEN</code> secret to your repository with your GitHub token.</li><li>Add the GitHub Actions <a href="https://github.com/kaangiray26/webmention/blob/main/main.yml" target="_blank" rel="noreferrer">workflow</a> to your repository. You don&#39;t have to change anything in it.</li><li>Deploy your website to trigger the workflow.</li></ol><p>That&#39;s it! You should now be able to send webmentions automatically with GitHub Actions. If you have any questions, feel free to ask me, or send me a webmention. I&#39;d love to see if it works for you too.</p>',21))])}const f=o(l,[["render",d]]);export{g as __pageData,f as default};
